# GitLab CI/CD Pipeline for deploying Customer360 code changes using Salesforce DX
#
# Run these commands before executing any build jobs,
# such as to install dependencies and set environment variables
#
before_script:
    - openssl rsa -in assets/server.key.enc -out assets/server.key -passin pass:$SERVER_KEY_PASSWORD
    # Install jq, a json parsing library
    - apt update && apt -y install jq
    # Setup SFDX environment variables
    # https://developer.salesforce.com/docs/atlas.en-us.sfdx_dev.meta/sfdx_dev/sfdx_dev_cli_env_variables.htm
    #- export SALESFORCE_CLI_URL=https://developer.salesforce.com/media/salesforce-cli/sfdx-linux-amd64.tar.xz
    - export SALESFORCE_CLI_URL=https://developer.salesforce.com/media/salesforce-cli/sfdx/channels/stable/sfdx-linux-x64.tar.xz
    - export SF_AUTOUPDATE_DISABLE=false
    - export SF_USE_GENERIC_UNIX_KEYCHAIN=true
    - export SF_DOMAIN_RETRY=600
    - export SF_LOG_LEVEL=DEBUG
    # Install Salesforce CLI
    - mkdir sfdx
    - wget -qO- $SALESFORCE_CLI_URL | tar xJ -C sfdx --strip-components 1
    #- './sfdx/install'
    - export PATH=./sfdx/bin:$PATH
    # Output CLI version and plug-in information
    #- sfdx update
    - sfdx --version
    - sfdx plugins --core

################################################################################################################    
# Define the stages of our pipeline

stages: 
    - mergerequest-validation1
    - mergerequest-validation2

################################################################################################################ - 
   
# Stage 1 -- Validate against sandbox for mergerequest

deploymentvalidation1:
    stage: mergerequest-validation1
    when: manual
    script:
     #   - sfdx force:auth:jwt:grant -r https://test.salesforce.com --clientid $SF_CONSUMER_KEY --jwtkeyfile assets/server.key --username $SF_USERNAME
        - sf org login jwt --instance-url https://test.salesforce.com --client-id $SF_CONSUMER_KEY --jwt-key-file assets/server.key --username $SF_USERNAME
        #- test_deploy 
    ##    - sfdx force:mdapi:deploy -d manifest -u $SF_USERNAME -l NoTestRun
        #- mkdir result
        - ls -ltr
        - sf apex run test --class-names RagTest --target-org $SF_USERNAME --code-coverage --output-dir result 
        #- sf project deploy validate --manifest manifest/package.xml --target-org $SF_USERNAME --wait 120 --test-level RunSpecifiedTests --tests RagTest
        - ls -ltr
        #- sf project deploy report --use-most-recent --results-dir result --coverage-formatters json --junit
       # local result=$(sf project deploy validate --manifest manifest/package.xml --target-org $SF_USERNAME --test-level RunLocalTests  --wait 120)
        #- sf project deploy start --manifest manifest/package.xml --target-org $SF_USERNAME --wait 120 --ignore-conflicts
       # - sf project deploy start --source-dir force-app/main/default/classes --target-org $SF_USERNAME --wait 120 
    only:
     - main

deploymentvalidation2:
    stage: mergerequest-validation2
    when: manual
    script:
       - sf org login jwt --instance-url https://test.salesforce.com --client-id $SF_CONSUMER_KEY_BISDEV --jwt-key-file assets/server.key --username $SF_USERNAME_BISDEV
       - mkdir result
       - ls -ltr
       - sf project deploy start --manifest manifest/package.xml --target-org $SF_USERNAME_BISDEV --wait 120 --ignore-conflicts --results-dir result --coverage-formatters json
       - ls -ltr
       #- org_username=$SF_USERNAME_BISDEV
       #- test_Apex_Testclasses_Run $org_username
    
    only:
     - main

